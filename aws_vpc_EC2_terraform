++ Terraform have 3 object type

Resource --- this which we want to create like VPC/EC2/Subnet/IGW/Route table etc
Data -- This is used to fetch value from aws like for EC2 we need image [ami] id that we have to fetch
Provider -- on which & with the help of plugin resource will be provison here is AWS.

In the below terraform file we have created VPC/EC2 and associate component.

Flow is like for EC2 in VPC with Internet GW

Items mention in brackets [] are dependency for that resource 

VPC--> SUBNETS[VPC_ID]---> Internet gateway[VPC_ID] --> route_table[vpc_ID & IGW_ID] --->association between route table&subnet [ route table id&subnet ID]>> Security_group[VPC_ID] --->EC2 machine [subnet ID & security_ID]


###########################################################
# provider
############################################################
provider "aws" {

}

############################################################
# RESOURCES
############################################################

# VPC

resource "aws_vpc" "test_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = "true"
  tags = {
    name = "test_vpc"
  }
}

# subnets
resource "aws_subnet" "subnet1" {
  cidr_block = "10.0.0.0/24"
  vpc_id     = aws_vpc.test_vpc.id
  map_public_ip_on_launch = "true"
  tags = {
    "name" = "vpc_first_subnet1"
  }

}

# Internet Gateway

resource "aws_internet_gateway" "IGW" {
  vpc_id = aws_vpc.test_vpc.id
  tags = {
    "name" = "vpc_IGW"
  }
}

# Routing table

resource "aws_route_table" "route_table1" {
  vpc_id = aws_vpc.test_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.IGW.id
  }
}

# association between route table & subnet

resource "aws_route_table_association" "route_table_subnet" {
  subnet_id      = aws_subnet.subnet1.id
  route_table_id = aws_route_table.route_table1.id
}

# security Group

resource "aws_security_group" "allow_http" {
  name        = "allow_protocols"
  description = "Allow  inbound traffic"
  vpc_id      = aws_vpc.test_vpc.id

  ingress {
    description      = " from outside VPC"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
   # ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    # ipv6_cidr_blocks = ["::/0"]
  }
}
#########################################################################################
# Data Source to fetch ami  image idfor Ec2 machine

# method 1

data "aws_ssm_parameter" "ami" {
  name = "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
}

# method-2 

data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

# EC2 machine

resource "aws_instance" "myec2" {
  instance_type = "t2.micro"
 # ami                    = data.aws_ami.ubuntu.id
   ami                    = nonsensitive(data.aws_ssm_parameter.ami.value)
  vpc_security_group_ids = [aws_security_group.allow_http.id]
  subnet_id              = aws_subnet.subnet1.id
  user_data              = <<EOF
      #! /bin/bash
sudo amazon-linux-extras install -y nginx1
sudo service nginx start
sudo rm /usr/share/nginx/html/index.html
echo '<html><head><title>Taco Team Server</title></head><body style=\"background-color:#1F778D\"><p style=\"text-align: center;\"><span style=\"color:#FFFFFF;\"><span style=\"font-size:28px;\">You did it! Have a &#127790;</span></span></p></body></html>' | sudo tee /usr/share/nginx/html/index.html
EOF

}
